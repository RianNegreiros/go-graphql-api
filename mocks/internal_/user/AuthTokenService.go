// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	user "github.com/RianNegreiros/go-graphql-api/internal/user"
)

// AuthTokenService is an autogenerated mock type for the AuthTokenService type
type AuthTokenService struct {
	mock.Mock
}

// CreateAccessToken provides a mock function with given fields: ctx, _a1
func (_m *AuthTokenService) CreateAccessToken(ctx context.Context, _a1 user.UserModel) (string, error) {
	ret := _m.Called(ctx, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UserModel) (string, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.UserModel) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.UserModel) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: ctx, _a1, tokenID
func (_m *AuthTokenService) CreateRefreshToken(ctx context.Context, _a1 user.UserModel, tokenID string) (string, error) {
	ret := _m.Called(ctx, _a1, tokenID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UserModel, string) (string, error)); ok {
		return rf(ctx, _a1, tokenID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.UserModel, string) string); ok {
		r0 = rf(ctx, _a1, tokenID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.UserModel, string) error); ok {
		r1 = rf(ctx, _a1, tokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: ctx, payload
func (_m *AuthTokenService) ParseToken(ctx context.Context, payload string) (user.AuthToken, error) {
	ret := _m.Called(ctx, payload)

	var r0 user.AuthToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user.AuthToken, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user.AuthToken); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(user.AuthToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTokenFromRequest provides a mock function with given fields: ctx, r
func (_m *AuthTokenService) ParseTokenFromRequest(ctx context.Context, r *http.Request) (user.AuthToken, error) {
	ret := _m.Called(ctx, r)

	var r0 user.AuthToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (user.AuthToken, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) user.AuthToken); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(user.AuthToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthTokenService creates a new instance of AuthTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthTokenService {
	mock := &AuthTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
