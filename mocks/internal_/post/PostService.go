// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	post "github.com/RianNegreiros/go-graphql-api/internal/post"
	mock "github.com/stretchr/testify/mock"
)

// PostService is an autogenerated mock type for the PostService type
type PostService struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *PostService) All(ctx context.Context) ([]post.Post, error) {
	ret := _m.Called(ctx)

	var r0 []post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]post.Post, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []post.Post); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, input
func (_m *PostService) Create(ctx context.Context, input post.CreatePostInput) (post.Post, error) {
	ret := _m.Called(ctx, input)

	var r0 post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, post.CreatePostInput) (post.Post, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, post.CreatePostInput) post.Post); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(post.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, post.CreatePostInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReply provides a mock function with given fields: ctx, parentID, input
func (_m *PostService) CreateReply(ctx context.Context, parentID string, input post.CreatePostInput) (post.Post, error) {
	ret := _m.Called(ctx, parentID, input)

	var r0 post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, post.CreatePostInput) (post.Post, error)); ok {
		return rf(ctx, parentID, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, post.CreatePostInput) post.Post); ok {
		r0 = rf(ctx, parentID, input)
	} else {
		r0 = ret.Get(0).(post.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, post.CreatePostInput) error); ok {
		r1 = rf(ctx, parentID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PostService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PostService) GetByID(ctx context.Context, id string) (post.Post, error) {
	ret := _m.Called(ctx, id)

	var r0 post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (post.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) post.Post); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(post.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPostService creates a new instance of PostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostService {
	mock := &PostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
