// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	graph "github.com/RianNegreiros/go-graphql-api/graph"
	mock "github.com/stretchr/testify/mock"
)

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, loginInput
func (_m *MutationResolver) Login(ctx context.Context, loginInput graph.LoginInput) (*graph.AuthResponse, error) {
	ret := _m.Called(ctx, loginInput)

	var r0 *graph.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.LoginInput) (*graph.AuthResponse, error)); ok {
		return rf(ctx, loginInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, graph.LoginInput) *graph.AuthResponse); ok {
		r0 = rf(ctx, loginInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, graph.LoginInput) error); ok {
		r1 = rf(ctx, loginInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, registerInput
func (_m *MutationResolver) Register(ctx context.Context, registerInput graph.RegisterInput) (*graph.AuthResponse, error) {
	ret := _m.Called(ctx, registerInput)

	var r0 *graph.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.RegisterInput) (*graph.AuthResponse, error)); ok {
		return rf(ctx, registerInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, graph.RegisterInput) *graph.AuthResponse); ok {
		r0 = rf(ctx, registerInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, graph.RegisterInput) error); ok {
		r1 = rf(ctx, registerInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMutationResolver creates a new instance of MutationResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMutationResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MutationResolver {
	mock := &MutationResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
